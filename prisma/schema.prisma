// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Default base model
//   uid      String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   isActive  Boolean  @default(true)
//   isDeleted Boolean  @default(false)
//   deletedAt DateTime?

model User {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  username  String    @unique
  password  String
  posts     Post[]    @relation(name: "PostAuthor")
  sessions  Session[] @relation(name: "SessionUser")
  roles     Role[]    @relation(name: "UserRole")
  jobs      Job[]     @relation(name: "JobUser")
}

model Session {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  user      User      @relation(name: "SessionUser", fields: [userId], references: [uid])
  userId    String
  expiresAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP + '02:00:00'::interval"))
}

model Role {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  name      String    @unique
  users     User[]    @relation(name: "UserRole")
}

enum PostType {
  MEDIA
  REQUEST
}

enum PostSubType {
  MOVIE
  SERIES
  LIVE
}

model Post {
  uid               String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isActive          Boolean     @default(true)
  isDeleted         Boolean     @default(false)
  deletedAt         DateTime?
  title             String
  content           String
  author            User        @relation(name: "PostAuthor", fields: [authorId], references: [uid])
  authorId          String
  type              PostType
  subType           PostSubType
  media             Media?      @relation(name: "PostMedia")
  linkedPostsParent Post[]      @relation(name: "PostLinked")
  linkedPostsChild  Post[]      @relation(name: "PostLinked")
}

enum MediaType {
  VIDEO_UPLOADED
  VIDEO_LINKED
  VIDEO_HARDLINKED
}

model Media {
  uid              String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isActive         Boolean   @default(true)
  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?
  type             MediaType
  url              String
  thumbnailDataUrl String?
  post             Post      @relation(name: "PostMedia", fields: [postId], references: [uid])
  postId           String    @unique
  jobs             Job[]     @relation(name: "JobMedia")
}

enum JobType {
  TRANSCODE
  THUMBNAIL
  UPLOAD
}

enum JobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

model Job {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  type      JobType
  status    JobStatus @default(QUEUED)
  data      String
  error     String?
  progress  Int
  userId    String
  user      User      @relation(name: "JobUser", fields: [userId], references: [uid])
  media     Media?    @relation(name: "JobMedia", fields: [mediaUid], references: [uid])
  mediaUid  String?
}
