// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Default base model
//   uid      String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   isActive  Boolean  @default(true)
//   isDeleted Boolean  @default(false)
//   deletedAt DateTime?

model User {
  uid          String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isActive     Boolean       @default(true)
  isDeleted    Boolean       @default(false)
  deletedAt    DateTime?
  username     String        @unique
  password     String
  posts        Post[]        @relation(name: "PostAuthor")
  sessions     Session[]     @relation(name: "SessionUser")
  roles        Role[]        @relation(name: "UserRole")
  jobs         Job[]         @relation(name: "JobUser")
  requests     Request[]     @relation(name: "RequestAuthor")
  subscription Subscription? @relation(name: "SubscriptionUser")
  Event        Event[]       @relation(name: "EventUser")
  viewed       View[]        @relation(name: "ViewUser")
}

enum EventType {
  USER_LOGIN
  USER_LOGOUT
  USER_PASSWORD_CHANGE
  USER_DISABLE
  USER_ENABLE
  USER_ROLE_CHANGE
  MEDIA_WATCHED
}

model Event {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  type      EventType
  data      String
  user      User      @relation(name: "EventUser", fields: [userId], references: [uid])
  userId    String
}

model Subscription {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  user      User      @relation(name: "SubscriptionUser", fields: [userId], references: [uid])
  userId    String    @unique
  expiresAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP + '30 days'::interval"))
}

model Session {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  user      User      @relation(name: "SessionUser", fields: [userId], references: [uid])
  userId    String
  expiresAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP + '02:00:00'::interval"))
}

model Role {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  name      String    @unique
  users     User[]    @relation(name: "UserRole")
}

enum PostType {
  MEDIA
  REQUEST
}

enum PostSubType {
  MOVIE
  SERIES
  SEASON
  EPISODE
}

model Post {
  uid       String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isActive  Boolean     @default(true)
  isDeleted Boolean     @default(false)
  deletedAt DateTime?
  title     String
  slug      String      @unique
  content   String
  author    User        @relation(name: "PostAuthor", fields: [authorId], references: [uid])
  authorId  String
  type      PostType
  subType   PostSubType
  media     Media?      @relation(name: "PostMedia")
  parent    Post?       @relation(name: "PostLinked", fields: [parentUid], references: [uid])
  childs    Post[]      @relation(name: "PostLinked")
  requests  Request[]   @relation(name: "RequestPost")
  artworks  Artwork[]   @relation(name: "ArtworkPost")
  parentUid String?
}

enum MediaType {
  VIDEO_UPLOADED
  VIDEO_LINKED
  VIDEO_HARDLINKED
}

model Media {
  uid         String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  type        MediaType
  url         String
  originalUrl String    @default("")
  size        BigInt    @default(0)
  post        Post      @relation(name: "PostMedia", fields: [postId], references: [uid])
  postId      String    @unique
  jobs        Job[]     @relation(name: "JobMedia")
  views       View[]    @relation(name: "ViewMedia")
}

model View {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  user       User      @relation(name: "ViewUser", fields: [userId], references: [uid])
  userId     String
  media      Media     @relation(name: "ViewMedia", fields: [mediaId], references: [uid])
  mediaId    String
  viewedSize BigInt

  @@id([userId, mediaId])
}

enum ArtworkType {
  THUMBNAIL
  POSTER
  BANNER
  BACKGROUND
}

model Artwork {
  uid       String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isActive  Boolean     @default(true)
  isDeleted Boolean     @default(false)
  deletedAt DateTime?
  dataUrl   String
  width     Int
  height    Int
  type      ArtworkType
  post      Post        @relation(name: "ArtworkPost", fields: [postId], references: [uid])
  postId    String
}

enum JobType {
  TRANSCODE
  THUMBNAIL
  UPLOAD
}

enum JobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

model Job {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  type      JobType
  status    JobStatus @default(QUEUED)
  data      String
  error     String?
  progress  Int
  userUid   String
  user      User      @relation(name: "JobUser", fields: [userUid], references: [uid])
  media     Media?    @relation(name: "JobMedia", fields: [mediaUid], references: [uid])
  mediaUid  String?
}

enum RequestType {
  MOVIE
  SERIES
}

enum RequestStatus {
  PENDING
  ACCEPTED
  FULLFILLED
  COMPLETED
  REJECTED
}

model Request {
  uid       String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isActive  Boolean       @default(true)
  isDeleted Boolean       @default(false)
  deletedAt DateTime?
  status    RequestStatus
  type      RequestType
  title     String
  content   String
  author    User          @relation(name: "RequestAuthor", fields: [authorId], references: [uid])
  authorId  String
  post      Post?         @relation(name: "RequestPost", fields: [postId], references: [uid])
  postId    String?
  torrent   String?
}
